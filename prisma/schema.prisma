generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model AdminRegistrationToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Admin {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  email                   String                 @unique
  password                String
  role                    String                 @default("Admin")
  schoolName              String                 @unique
  verified                Boolean                @default(false)
  verificationToken       String?

  teachers                Teacher[]
  students                Student[]
  parents                 Parent[]
  subjects                Subject[]
  sclasses                Sclass[]
  notices                 Notice[]
  gradings                Grading[]
  terms                   Term[]
  headTeacherComments     HeadTeacherComment[]
  classTeacherComments    ClassTeacherComment[]
  complains               Complain[]
  payments                Payment[]

  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model Term {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  termName       String
  nextTermStarts String
  nextTermEnds   String
  status         String    @default("Active")
  year           String

  school         Admin     @relation(fields: [schoolId], references: [id])
  schoolId       String    @db.ObjectId
  sclasses       Sclass[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Sclass {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  sclassName String

  school     Admin     @relation(fields: [schoolId], references: [id])
  schoolId   String    @db.ObjectId

  term       Term?     @relation(fields: [termId], references: [id])
  termId     String?   @db.ObjectId

  students   Student[]
  subjects   Subject[]
  teachers   Teacher[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Student {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  rollNum           String
  password          String
  role              String          @default("Student")
  gender            String?
  photo             String?
  discipline        String?
  timeManagement    String?
  smartness         String?
  attendanceRemarks String?
  verified          Boolean         @default(false)
  verificationToken String?

  sclass            Sclass          @relation(fields: [sclassId], references: [id])
  sclassId          String          @db.ObjectId

  school            Admin           @relation(fields: [schoolId], references: [id])
  schoolId          String          @db.ObjectId

  parent            Parent?         @relation(fields: [parentId], references: [id])
  parentId          String?         @db.ObjectId

  complains         Complain[]
  payments          Payment[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Parent {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String     @unique
  password             String
  role                 String     @default("Parent")
  phone                String?
  address              String?
  verified             Boolean    @default(false)
  verificationToken    String?

  school               Admin      @relation(fields: [schoolId], references: [id])
  schoolId             String     @db.ObjectId

  students             Student[]
  payments             Payment[]

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model Teacher {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String                 @unique
  password             String
  role                 String                 @default("Teacher")
  verified             Boolean                @default(false)
  verificationToken    String?

  school               Admin                  @relation(fields: [schoolId], references: [id])
  schoolId             String                 @db.ObjectId

  teachSclass          Sclass                 @relation(fields: [teachSclassId], references: [id])
  teachSclassId        String                 @db.ObjectId

  teachSubjectId       String?                @unique @db.ObjectId
  teachSubject         Subject?               @relation("SubjectTeacher", fields: [teachSubjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  classTeacherComments ClassTeacherComment[]

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}


model Subject {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  subName    String
  subCode    String
  sessions   String

  sclassName Sclass    @relation(fields: [sclassId], references: [id])
  sclassId   String    @db.ObjectId

  school     Admin     @relation(fields: [schoolId], references: [id])
  schoolId   String    @db.ObjectId

  teacher    Teacher?  @relation("SubjectTeacher")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Notice {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  details    String
  date       DateTime

  school     Admin     @relation(fields: [schoolId], references: [id])
  schoolId   String    @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Grading {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  from       Int
  to         Int
  grade      String
  comment    String

  school     Admin     @relation(fields: [schoolId], references: [id])
  schoolId   String    @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model HeadTeacherComment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  from       Int
  to         Int
  comment    String

  school     Admin     @relation(fields: [schoolId], references: [id])
  schoolId   String    @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ClassTeacherComment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  from       Int
  to         Int
  comment    String

  teacher    Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId  String?   @db.ObjectId

  school     Admin     @relation(fields: [schoolId], references: [id])
  schoolId   String    @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Complain {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  complaint  String

  user       Student   @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId

  school     Admin     @relation(fields: [schoolId], references: [id])
  schoolId   String    @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Payment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String
  date        DateTime  @default(now())
  dueDate     DateTime
  status      String
  receiptUrl  String?

  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String    @db.ObjectId

  parent      Parent    @relation(fields: [parentId], references: [id])
  parentId    String    @db.ObjectId

  school      Admin     @relation(fields: [schoolId], references: [id])
  schoolId    String    @db.ObjectId

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

type BotExamResult {
  subName        String    @db.ObjectId
  marksObtained  Int       @default(0)
}

type MidExamResult {
  subName        String    @db.ObjectId
  marksObtained  Int       @default(0)
}

type EndExamResult {
  subName        String    @db.ObjectId
  marksObtained  Int       @default(0)
}

type Attendance {
  date     DateTime
  status   String
  subName  String    @db.ObjectId
}
